import { Button } from "@react-components/button";
import { Keys } from "@react-components/shared";
import { Overlay, usePopup } from "@react-components/overlay";
import { Text } from "@react-components/text";
import { Transition } from "@react-components/transition";
import { act, fireEvent, render, waitFor } from "@testing-library/react";
import { createRef, forwardRef } from "react";
import { waitDelay } from "@utils/waitDelay";
import userEvent from "@utils/userEvent";

/*
Behaviors
    - a popup close on esc keypress
    - when hideOnEscape is false, do not close popup on esc keypress
    - a popup close on blur
    - when hideOnLeave is false, do not close popup on blur
    - a popup close on outside click
    - when hideOnOutsideClick is false, do not close popup on outside click

    - when restoreFocus is true, closing the popup return the focus to the trigger
    - when autoFocus is true, focus the popup element on open

Aria
    trigger:
        - a popup trigger have an aria-haspopup attribute
        - when the popup is open, the popup trigger aria-expanded is "true"
        - when the popup is open, the popup trigger aria-controls is "true"

    overlay:
        - when an id is provided for the overlay, it is used as the overlay id
        - when no overlay id is provided, an overlay id is autogenerated

Api
    - call onOpenChange when the popup open
    - call onOpenChange when the popup close

Refs
    - les classiques
*/

function Popup({
    id,
    open,
    defaultOpen,
    onOpenChange,
    hideOnEscape = true,
    hideOnLeave = true,
    hideOnOutsideClick = true,
    autoFocus = true,
    restoreFocus = true,
    "data-triggertestid": triggerTestId,
    "data-overlaytestid": overlayTestId
}) {
    const { triggerProps, overlayProps } = usePopup("dialog", {
        id,
        open,
        defaultOpen,
        onOpenChange,
        hideOnEscape,
        hideOnLeave,
        hideOnOutsideClick,
        autoFocus,
        restoreFocus
    });

    return (
        <>
            <Button {...triggerProps} data-testid={triggerTestId}>Trigger</Button>
            <Overlay {...overlayProps} data-testid={overlayTestId} />
        </>
    );
}

// ***** Behaviors *****

/*
    "click" trigger:
        - when open, close on trigger esc keypress
        - When open and hideOnEscape is false, do not close on trigger esc keypress

    "hover" trigger:
        - when closed, open on trigger focus
        - when closed, open on trigger hover

        - when open, close on trigger blur
        - when open, close on trigger leave
        - when open, close on trigger esc keypress
        - When open and hideOnEscape is false, do not close on trigger esc keypress
*/

beforeAll(() => {
    Transition.disableAnimation = true;
});

describe("\"click\" trigger", () => {
    test("when closed, open on trigger click", async () => {
        const { getByTestId, queryByTestId } = render(
            <Popup data-triggertestid="trigger" data-overlaytestid="overlay" />
        );

        await waitFor(() => expect(queryByTestId("overlay")).not.toBeInTheDocument());

        act(() => {
            userEvent.click(getByTestId("trigger"));
        });

        await waitFor(() => expect(getByTestId("overlay")).toBeInTheDocument());
    });

    test("when closed, open on trigger space keypress", async () => {
        const { getByTestId, queryByTestId } = render(
            <Popup data-triggertestid="trigger" data-overlaytestid="overlay" />
        );

        await waitFor(() => expect(queryByTestId("overlay")).not.toBeInTheDocument());

        act(() => {
            fireEvent.keyDown(getByTestId("trigger"), { key: Keys.space });
        });

        await waitFor(() => expect(getByTestId("overlay")).toBeInTheDocument());
    });

    test("when closed, open on trigger enter keypress", async () => {
        const { getByTestId, queryByTestId } = render(
            <Popup data-triggertestid="trigger" data-overlaytestid="overlay" />
        );

        await waitFor(() => expect(queryByTestId("overlay")).not.toBeInTheDocument());

        act(() => {
            fireEvent.keyDown(getByTestId("trigger"), { key: Keys.enter });
        });

        await waitFor(() => expect(getByTestId("overlay")).toBeInTheDocument());
    });

    test("when opened, close on trigger click", async () => {
        const { getByTestId, queryByTestId } = render(
            <Popup
                defaultOpen
                data-triggertestid="trigger"
                data-overlaytestid="overlay"
            />
        );

        await waitFor(() => expect(getByTestId("overlay")).toBeInTheDocument());

        act(() => {
            userEvent.click(getByTestId("trigger"));
        });

        await waitFor(() => expect(queryByTestId("overlay")).not.toBeInTheDocument());
    });

    test("when opened, close on trigger esc keypress", async () => {
        const { getByTestId, queryByTestId } = render(
            <Popup
                defaultOpen
                data-triggertestid="trigger"
                data-overlaytestid="overlay"
            />
        );

        await waitFor(() => expect(getByTestId("overlay")).toBeInTheDocument());

        fireEvent.keyDown(getByTestId("trigger"), { key: Keys.esc });

        await waitFor(() => expect(queryByTestId("overlay")).not.toBeInTheDocument());
    });

    test("when opened and hideOnEscape is false, do not close on trigger esc keypress", async () => {
        const { getByTestId } = render(
            <Popup
                defaultOpen
                hideOnEscape={false}
                data-triggertestid="trigger"
                data-overlaytestid="overlay"
            />
        );

        await waitFor(() => expect(getByTestId("overlay")).toBeInTheDocument());

        fireEvent.keyDown(getByTestId("trigger"), { key: Keys.esc });

        await waitFor(() => expect(getByTestId("overlay")).toBeInTheDocument());
    });
});

