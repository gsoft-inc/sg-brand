import { Button } from "@react-components/button";
import { Tooltip, TooltipTrigger } from "@react-components/tooltip";
import { Transition } from "@react-components/transition";
import { act, fireEvent, render, waitFor } from "@testing-library/react";
import { createRef } from "react";

beforeAll(() => {
    Transition.disableAnimation = true;
});

// ***** Aria *****

test("when an id is provided for the tooltip, it is used as the tooltip id", async () => {
    const { getByTestId } = render(
        <TooltipTrigger>
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip id="tooltip-id" data-testid="tooltip">Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    await waitFor(() => expect(getByTestId("tooltip")).toHaveAttribute("id", "tooltip-id"));
});

test("when no tooltip id is provided, a tooltip id is autogenerated", async () => {
    const { getByTestId } = render(
        <TooltipTrigger>
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip data-testid="tooltip">Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    await waitFor(() => expect(getByTestId("tooltip")).toHaveAttribute("id"));
});

test("when a tooltip is visible, the tooltip trigger aria-describedby match the tooltip id", async () => {
    const { getByTestId } = render(
        <TooltipTrigger>
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip id="tooltip-id" data-testid="tooltip">Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    await waitFor(() => expect(getByTestId("trigger")).toHaveAttribute("aria-describedby", "tooltip-id"));
});

// ***** Aria *****

test("call onOpenChange when the tooltip appears", async () => {
    const handler = jest.fn();

    const { getByTestId } = render(
        <TooltipTrigger onOpenChange={handler}>
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip data-testid="tooltip">Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    await waitFor(() => expect(handler).toHaveBeenLastCalledWith(expect.anything(), true));
});

test("call onOpenChange when the tooltip disappear", async () => {
    const handler = jest.fn();

    const { getByTestId } = render(
        <TooltipTrigger onOpenChange={handler}>
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip data-testid="tooltip">Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    act(() => {
        fireEvent.mouseLeave(getByTestId("trigger"));
    });

    await waitFor(() => expect(handler).toHaveBeenLastCalledWith(expect.anything(), false));
});

// ***** Refs *****

test("ref is a DOM element", async () => {
    const ref = createRef();

    const { getByTestId } = render(
        <TooltipTrigger ref={ref}>
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip>Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    await waitFor(() => expect(ref.current).not.toBeNull());

    expect(ref.current instanceof HTMLElement).toBeTruthy();
    expect(ref.current.tagName).toBe("DIV");
});

test("when using a callback ref, ref is a DOM element", async () => {
    let refNode = null;

    const { getByTestId } = render(
        <TooltipTrigger
            ref={node => {
                refNode = node;
            }}
        >
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip>Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    await waitFor(() => expect(refNode).not.toBeNull());

    expect(refNode instanceof HTMLElement).toBeTruthy();
    expect(refNode.tagName).toBe("DIV");
});

test("set ref once", async () => {
    const handler = jest.fn();

    const { getByTestId } = render(
        <TooltipTrigger ref={handler}>
            <Button data-testid="trigger">Trigger</Button>
            <Tooltip>Content</Tooltip>
        </TooltipTrigger>
    );

    act(() => {
        fireEvent.mouseEnter(getByTestId("trigger"));
    });

    await waitFor(() => expect(handler).toHaveBeenCalledTimes(1));
});

